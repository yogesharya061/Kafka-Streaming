/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.tech.schema.handset;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HandsetEnvelope extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HandsetEnvelope\",\"namespace\":\"org.tech.schema.handset\",\"fields\":[{\"name\":\"index\",\"type\":\"int\"},{\"name\":\"closed\",\"type\":\"long\"},{\"name\":\"customer\",\"type\":\"int\"},{\"name\":\"model\",\"type\":\"int\"},{\"name\":\"contract\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int index;
  @Deprecated public long closed;
  @Deprecated public int customer;
  @Deprecated public int model;
  @Deprecated public int contract;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public HandsetEnvelope() {}

  /**
   * All-args constructor.
   */
  public HandsetEnvelope(java.lang.Integer index, java.lang.Long closed, java.lang.Integer customer, java.lang.Integer model, java.lang.Integer contract) {
    this.index = index;
    this.closed = closed;
    this.customer = customer;
    this.model = model;
    this.contract = contract;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return index;
    case 1: return closed;
    case 2: return customer;
    case 3: return model;
    case 4: return contract;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: index = (java.lang.Integer)value$; break;
    case 1: closed = (java.lang.Long)value$; break;
    case 2: customer = (java.lang.Integer)value$; break;
    case 3: model = (java.lang.Integer)value$; break;
    case 4: contract = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'index' field.
   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * Sets the value of the 'index' field.
   * @param value the value to set.
   */
  public void setIndex(java.lang.Integer value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'closed' field.
   */
  public java.lang.Long getClosed() {
    return closed;
  }

  /**
   * Sets the value of the 'closed' field.
   * @param value the value to set.
   */
  public void setClosed(java.lang.Long value) {
    this.closed = value;
  }

  /**
   * Gets the value of the 'customer' field.
   */
  public java.lang.Integer getCustomer() {
    return customer;
  }

  /**
   * Sets the value of the 'customer' field.
   * @param value the value to set.
   */
  public void setCustomer(java.lang.Integer value) {
    this.customer = value;
  }

  /**
   * Gets the value of the 'model' field.
   */
  public java.lang.Integer getModel() {
    return model;
  }

  /**
   * Sets the value of the 'model' field.
   * @param value the value to set.
   */
  public void setModel(java.lang.Integer value) {
    this.model = value;
  }

  /**
   * Gets the value of the 'contract' field.
   */
  public java.lang.Integer getContract() {
    return contract;
  }

  /**
   * Sets the value of the 'contract' field.
   * @param value the value to set.
   */
  public void setContract(java.lang.Integer value) {
    this.contract = value;
  }

  /** Creates a new HandsetEnvelope RecordBuilder */
  public static org.tech.schema.handset.HandsetEnvelope.Builder newBuilder() {
    return new org.tech.schema.handset.HandsetEnvelope.Builder();
  }
  
  /** Creates a new HandsetEnvelope RecordBuilder by copying an existing Builder */
  public static org.tech.schema.handset.HandsetEnvelope.Builder newBuilder(org.tech.schema.handset.HandsetEnvelope.Builder other) {
    return new org.tech.schema.handset.HandsetEnvelope.Builder(other);
  }
  
  /** Creates a new HandsetEnvelope RecordBuilder by copying an existing HandsetEnvelope instance */
  public static org.tech.schema.handset.HandsetEnvelope.Builder newBuilder(org.tech.schema.handset.HandsetEnvelope other) {
    return new org.tech.schema.handset.HandsetEnvelope.Builder(other);
  }
  
  /**
   * RecordBuilder for HandsetEnvelope instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HandsetEnvelope>
    implements org.apache.avro.data.RecordBuilder<HandsetEnvelope> {

    private int index;
    private long closed;
    private int customer;
    private int model;
    private int contract;

    /** Creates a new Builder */
    private Builder() {
      super(org.tech.schema.handset.HandsetEnvelope.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.tech.schema.handset.HandsetEnvelope.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.closed)) {
        this.closed = data().deepCopy(fields()[1].schema(), other.closed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customer)) {
        this.customer = data().deepCopy(fields()[2].schema(), other.customer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.model)) {
        this.model = data().deepCopy(fields()[3].schema(), other.model);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.contract)) {
        this.contract = data().deepCopy(fields()[4].schema(), other.contract);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing HandsetEnvelope instance */
    private Builder(org.tech.schema.handset.HandsetEnvelope other) {
            super(org.tech.schema.handset.HandsetEnvelope.SCHEMA$);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.closed)) {
        this.closed = data().deepCopy(fields()[1].schema(), other.closed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customer)) {
        this.customer = data().deepCopy(fields()[2].schema(), other.customer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.model)) {
        this.model = data().deepCopy(fields()[3].schema(), other.model);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.contract)) {
        this.contract = data().deepCopy(fields()[4].schema(), other.contract);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'index' field */
    public java.lang.Integer getIndex() {
      return index;
    }
    
    /** Sets the value of the 'index' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder setIndex(int value) {
      validate(fields()[0], value);
      this.index = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'index' field has been set */
    public boolean hasIndex() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'index' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder clearIndex() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'closed' field */
    public java.lang.Long getClosed() {
      return closed;
    }
    
    /** Sets the value of the 'closed' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder setClosed(long value) {
      validate(fields()[1], value);
      this.closed = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'closed' field has been set */
    public boolean hasClosed() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'closed' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder clearClosed() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'customer' field */
    public java.lang.Integer getCustomer() {
      return customer;
    }
    
    /** Sets the value of the 'customer' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder setCustomer(int value) {
      validate(fields()[2], value);
      this.customer = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'customer' field has been set */
    public boolean hasCustomer() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'customer' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder clearCustomer() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'model' field */
    public java.lang.Integer getModel() {
      return model;
    }
    
    /** Sets the value of the 'model' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder setModel(int value) {
      validate(fields()[3], value);
      this.model = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'model' field has been set */
    public boolean hasModel() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'model' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder clearModel() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'contract' field */
    public java.lang.Integer getContract() {
      return contract;
    }
    
    /** Sets the value of the 'contract' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder setContract(int value) {
      validate(fields()[4], value);
      this.contract = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'contract' field has been set */
    public boolean hasContract() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'contract' field */
    public org.tech.schema.handset.HandsetEnvelope.Builder clearContract() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public HandsetEnvelope build() {
      try {
        HandsetEnvelope record = new HandsetEnvelope();
        record.index = fieldSetFlags()[0] ? this.index : (java.lang.Integer) defaultValue(fields()[0]);
        record.closed = fieldSetFlags()[1] ? this.closed : (java.lang.Long) defaultValue(fields()[1]);
        record.customer = fieldSetFlags()[2] ? this.customer : (java.lang.Integer) defaultValue(fields()[2]);
        record.model = fieldSetFlags()[3] ? this.model : (java.lang.Integer) defaultValue(fields()[3]);
        record.contract = fieldSetFlags()[4] ? this.contract : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
